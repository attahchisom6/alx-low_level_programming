#! /bin/bash

#STUDYING EVAL:
#A POP FUNCTION THAT ACT ON VARIABLES SILENTLY AND DIRECTLY WITHOUT STORING THE RESULT ON THE ORINAL VARIABLE

isnum(){
	 local ref='^[0-9]+$'
	 if [[ -n "$1" ]]
	 then
	       [[ ref =~ $1 ]] && return 0
	       return 1
       else
	       return 2
	 fi
        }

isvar(){
	  if isnum "$1"
	  then
		  return 1
	  fi
	  local arr=$(eval eval -- echo -n "\$$1")
	  if [[ -n "${arr[@]}" ]]
	  then
		  return 0
	  fi 
	  return 1
      }

popfunc(){
	   if [[ -z $@ ]]
	   then
		   return 1
	   fi

	 local  var=
	 local  isnum=0
	 local  arr=()
if isvar "$1"
then
	var="$1"
	isvar=1
	arr=($(eval eval -- echo -n "\${$1[@]}"))
else 
	arr=($@)
fi
#reverse the elements of the array so we can get rid of the last element using the shift command
 

arr=($(awk <<<"${arr[@]" '{ for (i=NR; i>1; --1) printf("%s ", $i); print $1;}'

#set "${arr[@]}" to ($@) so we can shift against it

eval set -- "${arr[@]}"

shift
	  
arr=($(awk <<< "$@" '{for ((i=NR; i> 1; --i)) printf ("%s", $i); print $1;}'))

echo "${arr[@]}"

if isvar "$1"
then
var="${arr[@]}" #this sets the content of the original var to the modified array
fi
	}
